// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ST.Data.DataAccess;

namespace ST.Data.DataAccess.Migrations
{
    [DbContext(typeof(STDbContext))]
    [Migration("20200509214324_AddNewEntities")]
    partial class AddNewEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ST.Data.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("ST.Data.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<DateTime>("LocationTime");

                    b.Property<double>("Longitude");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ST.Data.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastSession");

                    b.Property<Guid>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ST.Data.Entities.Traject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Distance");

                    b.Property<double>("Duration");

                    b.Property<Guid?>("EmployeeId");

                    b.Property<bool>("IsFinished");

                    b.Property<Guid?>("LocationFinalId");

                    b.Property<Guid?>("LocationInitialId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationFinalId");

                    b.HasIndex("LocationInitialId");

                    b.ToTable("Trajects");
                });

            modelBuilder.Entity("ST.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("ST.Data.Entities.Administrator", b =>
                {
                    b.HasBaseType("ST.Data.Entities.User");

                    b.Property<Guid?>("CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Administrator");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("ST.Data.Entities.Employee", b =>
                {
                    b.HasBaseType("ST.Data.Entities.User");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnName("Employee_CompanyId");

                    b.Property<int>("EmployeeStatus");

                    b.Property<Guid?>("LocationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("Employee");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("ST.Data.Entities.Traject", b =>
                {
                    b.HasOne("ST.Data.Entities.Employee")
                        .WithMany("Trajects")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ST.Data.Entities.Location", "LocationFinal")
                        .WithMany()
                        .HasForeignKey("LocationFinalId");

                    b.HasOne("ST.Data.Entities.Location", "LocationInitial")
                        .WithMany()
                        .HasForeignKey("LocationInitialId");
                });

            modelBuilder.Entity("ST.Data.Entities.Administrator", b =>
                {
                    b.HasOne("ST.Data.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("ST.Data.Entities.Employee", b =>
                {
                    b.HasOne("ST.Data.Entities.Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ST.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
